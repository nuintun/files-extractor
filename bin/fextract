#!/usr/bin/env node

'use strict';

// set process title
process.title = 'file extractor';

const path = require('path');
const chalk = require('chalk');
const program = require('commander');
const pkg = require('../package.json');
const FilesExtractor = require('../');
const utils = require('../lib/utils');
const inquirer = require('inquirer');

const CWD = utils.CWD;
const TYPES = ['mtime', 'ctime', 'atime', 'birthtime'];

const formatter = {
  date: function(value) {
    if (/^[+-]?\d*(\.\d*)?$/.test(value)) {
      value = parseInt(value);
    }

    return new Date(value);
  },
  files: function(value) {
    if (!value) {
      return '**/*';
    }

    return String(value);
  },
  output: function(value) {
    if (!value) return '.extract/';

    return (String(value) + '/').replace(/\\+/g, '/');
  }
};

program
  .version(pkg.version)
  .description(chalk.reset.cyan.bold(pkg.description))
  .option('-f, --files <files>', 'set the files of extract', formatter.files)
  .option('-o, --output <path>', 'set the output dir of extract', formatter.output)
  .option('-s, --start <date>', 'set the start date of extract', formatter.date)
  .option('-e, --end <date>', 'set the end date of extract', formatter.date)
  .option('-t, --type <type>', 'set the filter type of extract')
  .option('-d, --dot', 'extract dot files');

program.on('--help', function() {
  process.stdout.write(`\n  Documentation can be found at ${ chalk.reset.magenta.bold(pkg.homepage) }.\n`);
});

program.parse(process.argv);

function promptDate(type, callback) {
  return {
    type: 'input',
    name: type,
    message: `Please enter ${ type } date: `,
    validate: function(value) {
      if (utils.dateIsValid(formatter.date(value))) {
        return true;
      }

      return `Oops, value "${ value }" isn't a valid date!`;
    }
  };
}

function promptFilter() {
  return {
    type: 'list',
    name: 'type',
    message: 'Please choose filter type: ',
    choices: ['mtime', 'ctime', 'atime', 'birthtime']
  };
}

let questions = [];
let INI = FilesExtractor.loadYAML();
let INIStart = INI.start && formatter.date(INI.start);
let INIEnd = INI.end && formatter.date(INI.end);
let INIType = TYPES.indexOf(INI.TYPES) !== -1 ? INI.TYPES : TYPES[0];
let INIIgnore = INI.ignore;

INIStart = utils.dateIsValid(INIStart) ? INIStart : null;
INIEnd = utils.dateIsValid(INIEnd) ? INIEnd : null;
INIIgnore = Array.isArray(INIIgnore) ? INIIgnore : (typeof INIIgnore === 'string' ? [INIIgnore] : []);

if (program.hasOwnProperty('start')) {
  if (!utils.dateIsValid(program.start)) {
    questions.push(promptDate('start'));
  }
} else {
  if (!INIStart) {
    questions.push(promptDate('start'));
  }
}

if (program.hasOwnProperty('end')) {
  if (!utils.dateIsValid(program.end)) {
    questions.push(promptDate('end'));
  }
}

if (program.hasOwnProperty('type')) {
  if (TYPES.indexOf(program.type) === -1) {
    questions.push(promptFilter());
  }
}

function exec(files, output, start, end, dot, type, ignore) {
  ignore.push(output + '**/*');

  return new FilesExtractor({ files, output, start, end, dot, type, ignore }).extract();
}

if (questions.length) {
  inquirer
    .prompt(questions)
    .then(function(input) {
      let files = formatter.files(program.files || INI.files);
      let output = program.output || formatter.output(INI.output);
      let start = input.start ? formatter.date(input.start) : (program.start || INIStart);
      let end = input.end ? formatter.date(input.end) : (program.end || (INIEnd ? INIEnd : new Date()));
      let dot = Boolean(program.dot || INI.dot);
      let type = input.type || program.type || INIType;

      return exec(files, output, start, end, dot, type, INIIgnore);
    }).catch(function(error) {
      process.stderr.write(error);
    });
} else {
  process.nextTick(function() {
    let files = formatter.files(program.files || INI.files);
    let output = program.output || formatter.output(INI.output);
    let start = program.start ? program.start : INIStart;
    let end = program.end ? program.end : (INIEnd || new Date());
    let dot = Boolean(program.dot || INI.dot);
    let type = program.type || INIType;

    return exec(files, output, start, end, dot, type, INIIgnore);
  });
}
