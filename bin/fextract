#!/usr/bin/env node

'use strict';

// Set process title
process.title = 'files extractor';

const cluster = require('cluster');

if (cluster.isMaster) {
  cluster.setupMaster({ silent: true });

  const UI = require('../lib/ui');
  const program = require('commander');
  const inquirer = require('inquirer');
  const utils = require('../lib/utils');
  const CONST = require('../lib/const');
  const pkg = require('../package.json');
  const formatter = require('../lib/formatter');
  const validator = require('../lib/validator');

  const parseDate = utils.parseDate;
  const parseTypes = utils.parseTypes;
  const parseIgnore = utils.parseIgnore;
  const valueInvalid = utils.valueInvalid;

  inquirer.registerPrompt('datepicker', require('inquirer-datepicker'));

  program
    .version(pkg.version)
    .description(utils.color(pkg.description, 'cyan', false, true))
    .option('-d, --dot', 'extract dot files')
    .option('-f, --files <files>', 'set the files of extract')
    .option('-o, --output <path>', 'set the output dir of extract')
    .option('-s, --start <date>', 'set the start date of extract', parseDate)
    .option('-e, --end <date>', 'set the end date of extract', parseDate)
    .option('-t, --types <type,...>', `set the filter types[${CONST.FILTER_TYPES.join(', ')}] of extract`, parseTypes);

  program.on('--help', () => {
    process.stdout.write(`\n\n  Documentation can be found at ${utils.color(pkg.homepage, 'magenta', false, true)}.\n`);
  });

  program.parse(process.argv);

  const prompt = [];
  const yaml = utils.loadYAML(CONST.YAML_SRC) || {};

  /**
   * @function promptDatetime
   * @description Prompt datetime
   * @param {string} name
   * @param {string} initial
   */
  function promptDatetime(name, initial) {
    prompt.push({
      name: name,
      type: 'datepicker',
      default: initial,
      message: `Please input options.${name}:`
    });
  }

  /**
   * @function promptInput
   * @description Prompt input
   * @param {string} name
   */
  function promptInput(name) {
    prompt.push({
      name: name,
      type: 'input',
      message: `Please input options.${name}:`,
      validate: value => {
        if (validator[name](value)) {
          return true;
        }

        return `Oops, value ${JSON.stringify(value)} is invalid!`;
      }
    });
  }

  /**
   * @function promptCheckbox
   * @description Prompt checkbox
   * @param {string} name
   * @param {Array} choices
   * @param {Boolean} required
   * @param {Array} defaults
   */
  function promptCheckbox(name, choices, required, defaults) {
    prompt.push({
      name: name,
      type: 'checkbox',
      message: `Please select options.${name}:`,
      choices: choices,
      default: Array.isArray(defaults) ? defaults : choices,
      validate: value => {
        if (required && value.length < 1) {
          return 'Oops, you must select at least one item!';
        }

        return true;
      }
    });
  }

  /**
   * @function promptList
   * @description Prompt list
   * @param {string} name
   * @param {Array} choices
   * @param {number} defaults
   */
  function promptList(name, choices, defaults) {
    prompt.push({
      name: name,
      type: 'list',
      message: `Please select options.${name}:`,
      choices: choices,
      default: defaults
    });
  }

  const DAY_MS = 24 * 60 * 60 * 1000;

  CONST.OPTIONS_KEYS.forEach(key => {
    let yamlValue = yaml[key];
    const value = program[key];
    const format = formatter[key];
    const validate = validator[key];
    const hasOwnKey = program.hasOwnProperty(key);
    const yamlHasOwnKey = yaml.hasOwnProperty(key);

    function save(value) {
      program[key] = value;
    }

    function initalDatetime() {
      return key === 'start' ? new Date(Date.now() - DAY_MS) : new Date();
    }

    switch (key) {
      case 'start':
      case 'end':
        if (hasOwnKey) {
          if (!validate(value)) {
            valueInvalid(key);
            promptDatetime(key, initalDatetime());
          }
        } else if (yamlHasOwnKey) {
          yamlValue = parseDate(yamlValue);

          if (validate(yamlValue)) {
            save(yamlValue);
          } else {
            valueInvalid(key, CONST.YAML);
            promptDatetime(key, initalDatetime());
          }
        } else {
          if (key === 'start') {
            promptDatetime(key, initalDatetime());
          } else {
            save(format(value));
          }
        }
        break;
      case 'types':
        if (hasOwnKey) {
          if (!validate(value)) {
            valueInvalid(key);
            promptCheckbox(key, CONST.FILTER_TYPES, true);
          }
        } else if (yamlHasOwnKey) {
          yamlValue = parseTypes(yamlValue);

          if (validate(yamlValue)) {
            save(yamlValue);
          } else {
            valueInvalid(key, CONST.YAML);
            promptCheckbox(key, CONST.FILTER_TYPES, true);
          }
        } else {
          save(format(value));
        }
        break;
      case 'ignore':
        if (yamlHasOwnKey) {
          yamlValue = parseIgnore(yamlValue);

          if (validate(yamlValue)) {
            save(yamlValue);
          } else {
            valueInvalid(key, CONST.YAML);
          }
        } else {
          save(format(value));
        }
        break;
      default:
        if (hasOwnKey) {
          if (!validate(value)) {
            valueInvalid(key);

            if (key === 'dot') {
              promptList(
                key,
                [
                  {
                    name: 'true',
                    value: true
                  },
                  {
                    name: 'false',
                    value: false
                  }
                ],
                1
              );
            } else {
              promptInput(key);
            }
          }
        } else if (yamlHasOwnKey) {
          if (validate(yamlValue)) {
            save(yamlValue);
          } else {
            valueInvalid(key, CONST.YAML);

            if (key === 'dot') {
              promptList(
                key,
                [
                  {
                    name: 'true',
                    value: true
                  },
                  {
                    name: 'false',
                    value: false
                  }
                ],
                1
              );
            } else {
              promptInput(key);
            }
          }
        } else {
          save(format(value));
        }
    }
  });

  function bootstrap() {
    let options = {};

    CONST.OPTIONS_KEYS.forEach(key => {
      options[key] = program[key];
    });

    return {
      status: CONST.STATUS.BOOTSTRAP,
      data: options
    };
  }

  const worker = cluster.fork();

  if (prompt.length) {
    inquirer
      .prompt(prompt)
      .then(input => {
        Object.keys(input).forEach(key => {
          const value = input[key];
          const format = formatter[key];

          program[key] = format(value);
        });

        worker.send(bootstrap());
      })
      .catch(exception => {
        utils.error(exception);
      });
  } else {
    worker.send(bootstrap());
  }

  new UI(worker);
} else {
  require('../lib/worker');
}
